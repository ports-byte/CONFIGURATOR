package com.atlas;

import gnu.io.CommPortIdentifier;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

public class SDWAN extends JFrame implements ActionListener {
    private JPanel panel1;
    private JButton liftOffBtn;

    void sdwanStart() {
        this.setLocationRelativeTo(null);
        this.setTitle("1BEER");

        liftOffBtn.addActionListener(this);
        liftOffBtn.setActionCommand("LIFT OFF");

        panel1.setSize(3000, 3000);
        panel1.setVisible(true);
        SwingUtilities.invokeLater(this::createWindow);
    }

    void createWindow() {
        this.add(panel1);
        this.setVisible(true);
        this.pack();
    }

    void open() {
        System.out.println("Here we go...!");
        try {
            CommPortIdentifier portIdentifier = CommPortIdentifier.getPortIdentifier("COM3");
            if (portIdentifier.isCurrentlyOwned()) {
                System.out.println(portIdentifier.getCurrentOwner());
                System.out.println("Port is ready to go!");
            } else {
                System.out.println("Can't find the port");
                JOptionPane.showMessageDialog(this, "Check the box is ON and plugged in");
            }
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "Oh shit something went wrong! Exception: " + e);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        if (cmd.equals("LIFT OFF")) {
            open();
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setAutoscrolls(true);
        panel1.setBackground(new Color(-14737633));
        panel1.setForeground(new Color(-1050113));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 48, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-1050113));
        label1.setText("Plug in the USB and watch the magic happen.");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        liftOffBtn = new JButton();
        liftOffBtn.setActionCommand("");
        liftOffBtn.setBackground(new Color(-16777216));
        Font liftOffBtnFont = this.$$$getFont$$$(null, -1, 48, liftOffBtn.getFont());
        if (liftOffBtnFont != null) liftOffBtn.setFont(liftOffBtnFont);
        liftOffBtn.setForeground(new Color(-1050113));
        liftOffBtn.setHideActionText(true);
        liftOffBtn.setText("LIFT OFF");
        panel1.add(liftOffBtn, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }


}
